Listar Rutas
    Para ver todas las ritas que tenemos definidas en el sistema:
        * php artisan route:list o php artisan r:l

    Nos va a mostrar tanto rutas definidas por nosotros como rutas definidas por paquetes
    Para ver solo las rutas definidas por nosotros
        * php artisan r:l --except-vendor

    Para solo ver las rutas creadas por paquetes
        * php artisan r:l --only-vendor

    Supongamos que solo queremos visualizar rutas que empiezen con la palabra "cursos"
        * php artisan r:l --path=cursos

Almacenar en cache las rutas
    Como todo el tiempo Laravel lee el archivo "web.php" de arriba a abajo, cuando pasemos a produccion
    ya no vamos a estar creando rutas y lo mejor seria que laraval ya se aprenda las rutas que estan
    Para almacenar las rutas en Cache: (Esto se haria en la terminal del servidor)
        * php artisan route:cache

    Si despues el proyecto sufrio actualizaciones y tenemos nuevas rutas
    Primero limpiamos las rutas del cache
        * php artisan route:clear
    Luego con el archivo actualizado volvemos a agregar a Cache

Crear Controladores
    * php artisan make:controller PostController

Vistas
    Uso de la plantilla Blade para no crearlas con PHP crudo
    El nombre que se les da puede ser cualquiera pero se sigue la convencion de nombrarla como el metodo del controlador donde se llaman

Crear un Provider
    * php artisan make:provider NombreProvider

Imprimir contenido o implementar logica dentro de las plantillas Blade
Para imprimir variables tenemos que hacerlo con
            {{ Variable }}
Pero si estamos trabajando con algun framework que utiliza la misma sintaxis para mostrar contenido
tenemos que hacer
            @{{ Dato/Codigo }}

Instalamos Tailwind y usamos un codigo de alert que sacamos de la documentacion
Para usar un componente
    * php artisan make:component Nombre
Estos estan en la carpeta App/View/components

Componentes como plantilla
    Cuando tenemos codigo que se repite mucho en las paginas, como los estilos, CDN u otros archivos, usamos estas plantillas
    En este caso vamos a usarlas creando componentes
        - php artisan make:component AppLayout

Migraciones:
    Conexion a la Base de datos:
        Abrimos el manejador del MySql (En la variable de entorno vemos el nombre de la BD y el user/passwrod)
        En laragon al crear el proyecto de laravel ya no creo la BD pero si no esta la creamos manualmente
    Si la BD esta recien creada o queremos veirificar que si tenemos conexion ejecutamoe el comando:
        * php artisan migrate
    Las tablas se crearon por los archivos de migraciones que tengamos, Laravel registra en una tabla de la BD las migraciones ejecutadas
    con un Lote de identificacion para agrupar cuales se ejecutar en conjunto y cuales en otra ocacion

    Crear nuestras migraciones
        - php artisan make:migration NombreTablaPlural
    Para Ahorrarnos tener que escribirle todo el codigo podemos nombrarlos siguiendo una convencion
        - php artisan make:migration create_NombrePlural_table
    Ejecutar la migracion:
        - php artisan migrate

    Al ejecutar las migraciones veremos que se ejcutan por lotes
    Para ejecutar los cambios No podemos ejecutar el metodo UP de los archivos de migracion sino que tenemos que ejecutar el metodo DOWN
        - php artisan migrate:rollback
    Hay que tener en cuenta que por defecto este comando ejecuta el metodo Down de todas las migraciones que se hayan ejecutado en el ultimo lote
    por consecuencia nos elimina los cambios de la migracion.
    Ahora podemos volver a ejecutar el comando para ejecutar el metodo UP y asi se nos aplicara las modificaciones que hicimos

    Pero si empezamos a hacer cambios de migraciones de diferentes lotes podriamos ejecutar el comando del Rollback para cada uno de los lotes hasta
    llegar al que queremos
    Lo mejor es que para revertir los cambios de diferentes lotes
        - php artisan migrate:refresh
    Este comando nos ejecuta todos los metodos DOWN de cada una de las migraciones sin importar el Lote en el que se encuentren y despues nos ejecuta el metodo UP
    para cada uno de los archivos (Despues de esto tambien tendremos registradas todas las migraciones en el mismo lote porque las borramos y volvimos a ejecutar todas)

    Tambien tenemos el comando
        - php artisan migrate:fresh
    Este comando nos elimina todas las tablas y despues ejecuta el metodo UP

    Cual de estos dos comando elegir
        Si ya estamos trabajando en proyecto de laravel pasado donde luego hemos creado tablas usando las migraciones y en un determinado momento queremos revertir todos los cambios
        que hemos hecho con las migraciones y volver a ejecutar, en ese caso es mejor usar el comando "Refresh" porque este comando solo va a revertir los cambios que hemos hecho con
        las migraciones, volver a ejecutar pero lo mas importante es que no va a tocar las tablas que ya estaban en el proyecto pasado

        Mientras que Fresh es mas destructivo, eliminando todas las tablas independientemente si las creamos con migraciones o no
        Si hemos trabajado en un proyecto desde cero, da igual si usamos uno u otro

    Lo anterior fueron comandos destructivos pero para el caso que ya tenemos datos importantes en la Base de datos
        Modificar Campos en una determinada tabla sin que se eliminen los registros
            Para esto podemos crear migraciones para que alteren una Tabla
            (En este caso le queremos agregar un nuevo campo), Ademas que seguimos la convencion: NombreMigracion_to_NombreTablaModificar_table
                - php artisan make:migration add_slug_to_posts_table
            Despues de ejecutar este comando en los registros de la tabla para este nuevo campo tendra el valor de NULL por tanto el campo aceptara valores null

    Cambiar el nombre de una Tabla
        Para esto nos creamos una nueva migracion siguiendo la convencion de rename_NombreTabla_table
            - php artisan make:migration rename_posts_table

    Creamos una migracion para eliminar una tabla (Convencion: drop_NombreTabla_table)
        - php artisan make:migration drop_posts_table

    Tipos de datos que podemos crear usando los metodos que nos proporicona PHP

Query Builder
    Esto es para poder interactuar con las datos que tenemos en la base de datos para poder recuperar registros, editarlos o eliminarlos
    con este generamos consultas para laravel

La razon del uso de TailwindCSS en Laravel es que muchos de sus Kit de inicio que nos brinda usan por defecto este Framework
y varios paquetes oficiales, como tener un sistema de login y registro de forma rapida

Eloquent
    Esta es otra forma de hacer consultas y es usando este ORM, usa el paradigma de POO trabajando con las tablas como si fueran objetos
    Eloquent mapea cada tabla de la BD a una clase PHP (Modelo), cada instancia del modelo representa una fila en la tabla
    Entre las ventajas es que Eloquent nos proporciona una sintaxis legible, ya que las consultas son de forma declarativa
    otra ventaja es que eloquent permite definir relaciones entre los modelos de manera sencilla, estos los obtenemos directamente de los modelos
    Podemos hacer la carga perezosa de relaciones, eso quiere decir que nos permite cargar los datos relacionados en una sola vez, evitando consultas
    adicionales a la base de datos, tenemos eventos del modelo
    Podemos almacenar en cache los resultados de consulta frecuente

    Si queremos trabajar con Eloquent primero tenemos que crear esas Clases (Modelo)
    En cada proyecto de Laravel por defecto viene con un modelo en:
        app/Models/User.php -> Este es el modelo que nos permite conectarnos con la tabla Users de la BD

    En este caso primero creamos la tabla Users en la BD y luego insertar unos registros para hacer las consultas
    entre las migraciones por defecto tenemos la que nos crea la tabla de Users
        - Si no la tenemos en la BD ejecutamos las migraciones
        - Usamos los Factories para crear datos ficticios a la BD "database/factories/UserFactory.php" y "database/seeder/DatabaseSeeder.php"
            (php artisan db:seed)

    Asignacion Masiva
        Para este caso lo hicimos en otra tabla de "categories"
        Creamos el modelo
            - php artisan make:model Category
        Cuando queremos crearle al modelo de una vez los elementos que se relacionan con este
        lo relacionamos con su migracion (Esto para cuando estamos creando de una vez la tabla con la migracion)
            - php artisan make:model Category -m

    Relaciones Polimorficas

        Relacion Uno a Uno:
            Supongamos que tenemos una tabla Usuarios pero tambien tenemos otra tabla que contiene datos del trabajo
            para no tener una unica tabla con todos los campos de las dos tablas, creamos dos tablas pero tenemos que relacionarlas de manera
            que la informacion de las dos tablas conectadas, asi que nos creamos una llave foranea en la tabla "Trabajo" conectandose en el
            campo ID de la tabla "Usuario", para crear la llave foranea en laravel tenemos que seguir algunas convenciones
                * Usar el nombre de la otra tabla pero en singular
                * Seguido de un Guion
                * Le ponemos el nombre del campo con el que se relaciona
            Este campo almacenara los IDs de los usuarios en la tabla de "Trabajo"
            Aqui la tabla "Trabajo" la creamos como "Profile"
                -  php artisan make:model Profile -m

        Relacion Uno a Muchos:
            Supongamos que en un tabla tenemos todas las categorias disponibles que tendremos y tenemos la tabla de post donde estan los articulos
            como queremos relacionar que cada Post tenga su categoria, a la tabla Post le creamos una columna que tendra el Id de la tabla de categoria
            Entonces una categoria va a tener mas de un post asociado

            Creamos el modelo de Post, donde ademas en el comando especificamos que nos cree con su migracion y un Factory por eso el "mf"
                * php artisan make:model Post -mf
            Ejecutamos las migraciones y los seeders
                * php artisan migrate:fresh --seed

        Mejorar la estrcutura en la relacion uno a uno:
            En la tabla "Profile" le quitamos campos y los pusimos en otra tabla, de forma que ahora tenemos tres tablas
                - Users
                - Profiles
                - Address (En esta tabla almacenamos la direccion de los usuarios)
            Para saber a que direccion le pertieneces cual Profile, creamos un FK en Address donde almacenamos el Id de los Profiles
            Ahora tenemos una relacion uno a uno entre usuarios y perfiles pero tambien tenemos la misma relacion entre Profiles y Address

            Creamos el nuevo modelo:
                - php artisan make:model Address -mf

        Este caso es similar al de arriba pero con la relacion uno a muchos
            Ahora tenemos la tabla Courses donde esta un tema, hay otra tabla llamda "sections" donde estan las secciones que puede tener la tabla "Courses"
            como un curso puede tener varias secciones entonces la relacion es de uno a muchos, hay una tercera tabla llamada "Lessons" que se relaciona con "Sections"
            donde una determinada seccion puede tener varias Lecciones

            Entonces queremos obtener las lecciones correspondientes a los cursos sin pasar por la tabla de secciones

                * php artisan make:model Course -mf
                * php artisan make:model Section -mf
                * php artisan make:model Lesson -mf

        Relacion Muchos a Muchos
            Tenemos la tabla de Posts y estos pueden tener Tags, podriamos pensar que un Post pude tener muchas etiquetas
            pero que pasa si el Post con ID=3 debe de contener etiquetas que ya usaron Etiquetas previas por tanto estamos teniendo informacion redundante
            Entonces en este caso tenemos una relacion de muchos a muchos porque un Post puede tener varias Tags pero un misma Tag puede tener varios Posts
            por tanto las tablas que tendriamos seria:
                - Posts
                - Post_tag
                - Tags
            En Posts y Tags tenemos los datos y para relacionarlos lo hacemos en la tabla "Post_tag" esta tabla para eloquent debe de seguir varias convenciones
            una es el nombre debe ser en sigular de ambas tablas y en orden alfabetico por eso "Post_Tag"
            Otra convencion es que las llavez foraneas deben de llamarse empezando por el nombre de la tabla en singular y el nombre del campo con el que se relacionan

            Creamos los modelos:
                * php artisan make:model Tag -mf
                * php artisan make:migration create_post_tag_table

        Relacion Uno a Uno Polimorficas
            Supongamos que tenemos una tabla llamada Posts donde tenemos los siguientes campos:
                - Id
                - Name
                - Body
                - Image
            Ahora requerimos crear un tipo de galeria que pueda mostrar todas las imagenes que estan registradas, lo mejor para ese caso es que todas las imagenes de nuestra aplicacion
            esten en una tabla aparte, por tanto en una tabla vamos a tener el contenido de post y en otra tabla el contenido de las imagenes
            En la tabla imagenes tendiamos:
                - Id
                - post_id (Con esto relacionamos esta tabla con la tabla Post)
                - image_path
            Pero resulta que tenemos otra tabla llamada "Books" donde tambien tenemos imagenes por tanto tenemos que separar ese campo, podriamos pensar en crear dentro de la tabla imagenes
            otro campo como "book_id" donde cuando requeiramos almacenar para el post solo almacenamos en la columna que le corresponde y para cuando sea en Book solo almacenamos en la columna
            correspondiente, pero esto no es viable porque no sabemos cuando tenemos o no informacion
            Por tanto creariamos otra tabla "image_books" donde solo tenemos el Id de la tabla Books y su ruta de imagen, pero esta solucion tampoco nos gusta porque queremos a fuerzas
            tener todas las imagenes de nuestra aplicacion en una misma tabla para cuando queramos aplicar una consulta sea mas facil recuperar los datos y ademas porque podriamos tener muchas otras tablas
            no solo dos como en este caso

            Las relaciones consisten en que vamos a tener que almacenar el id de las entidades con el cual tenemos que relacionarlas (Post y Books) pero la FK no se va a llamar "post_id" y "book_id"
            sino que va a llevar un nombre especial:
                - "NombreTabla(En singular y le agregamos la palabra 'able')_id" -> esta es la convencion que nos recomiendo la documentacion
                    Ejemplo: "imageable_id"
            Este sera el nombre de nuestra FK y dentro tendra el ID con el cual queremos relacionarlo que seria Post o Books
            Pero si tenemos los mismo numeros ¿Como vamos a saber a cual de las dos entidades le corresponde? Para esto tenemos que crear otro campo mas que se llamara igual que con el nombre de la FK pero con terminacion "_type"
                    Ejemplo: "imageable_type"
            Ahi almacenaremos el nombre de la entidad con la que esta relacionada que contendra toda la ruta del modelo:
                    * App/Models/Post
                    * App/Models/Book
            Asi sabemos a que entidad le corresponde cada imagen y usando una sola tabla

            Creamos el modelo:
                - php artisan make:model Image -m

        Relacion Uno a Muchos Polimorficas
            Supongamos que queremos implementar un sistema de comentarios donde Post puede tener varios Comentarios, si lo hacemos con la relacion Uno a Muchos tradicional
            tendriamos una tabla "Post" y otra tabla "Comments" con la FK del Post_Id, Si tenemos una aplicacion muy grande donde vamos a requerir que no solo Post tenga comentarios sino muchas otras tablas
            por lo que la unica solucion sera crear una tabla de comentarios para cada tabla, para solucionarlo tenemos las relaciones polimorficas donde por ejemplo tenemos dos entidades:
            Post y Books, vamos a tener una unica tabla "Comments" que tenemos:
                - Id
                - body
                - commentable_id (Almacenamos el Id de las entidades con las cuales queremos ir relacionando los comentarios)
                - commentable_type (Aqui sabemos a cual entidad le corresponde el Id)
            Los Nombres deben de seguir las mismas convenciones

            Creamos esta tabla:
                * php artisan make:model Comment -m

        Relacion Muchos a Muchos Polimorficas
            En una relacion pequeña la relacion muchos a muchos normal es sufciente, volviendo a nuestro ejemplo normal con las tablas:
                - Posts
                - Post_tag
                - Tags
            El problema empezara cuando tendremos mas tablas que se tienen que relacionar con la tabla Tags, que en ese caso tendrimamos que crear otra tabla
            por ejemplo para la entidad Books:
                - Books
                - Book_Tag
                - Tags
            Lo ideal es que tengamos una sola tabla intermedia donde tengamos los Ids y esa tabla la usemos para relacinar cualquier entidad que se deba realcionar con los Tags
            en este caso, asi nos evitamos crear tablas intermedias por cada entidad que se quiera relacionar con "Tags"

            En la relacion muchos a muchos polimorficas tenemos las tablas "Posts", "Books" que se quieren relacionar con "Tags" y la tabla intermedia seria "Taggables" (Singular+"ables")
            los campos que debe de tener son:
                - taggable_id (Aqui almacenamos el Id de las tablas con la que queremos relacionarla)
                - taggable_type (La ruta del modelo al que esta realcionado)
                - tag_id (Id de la tabla Tag)
            Creamos la tabla intermedia:
                * php artisan make:migration create_taggables_table

    Consultar datos de las relaciones
        En la tabla "Users" tenemos dos registros, en la tabla "Profiles" solo tenemos un perfil, queremos usar las relaciones para crear un nuevo perfil
        y ese perfil asociarlo a uno del usuarios que tenemos
        Ejecutamos:
            * php artisan tinker
        Recuperamos el usuario al que queremos asignarle el perfil
            * $user = User::find(2);
        Para asignarle un nuevo perfil accedemos al objeto usarios luego acceder a la relacion profile, como queremos insertar datos le pondemos los parentesis
        y de llamamos el mertodo "create" donde en el arreglo le pasamos los datos, con esto Elocuent nos crea los datos pero como lo estamos haciendo usando la relacion
        por defecto ya nos llena los campos "User_id" con su valor de "ID" (Debemos tener habilitada la asignacion masiva)
            * $user->profile()->create([
                "job" => "Bibliotecologa",
                "website" => "www.prueba.com",
                "bio" => "Texto de prueba"
            ])

        Aqui recuperamos un Curso
            * $course = Course::first();
        Accedemos a su relacion y de ahi empezamos a registrar nuevos datos
            * $course->comments()->create([
                "body" => "Comentario agregado desde tinker"
            ])

        Introducir registros en la relacion Muchos a Muchos
        Cuando queremos ingresar registros en la tabla intermedia, tenemos que acceder a la relacio, en este caso de cursos con tags
        y de ahi llamamos el metodo "attach", aqui le pasamos el ID de la etiqueta con la cual queremos relacionarla
            $course->tags()->attach(1);
        Para relacionarlo con mas de un registro
            $course->tags()->attach([1,2,3]);
        Si queremos eliminar el registro
            $course->tags()->detach(1);

        Si estamos actualizando registros
        Supongamos que estamos en un formulario y cuando queramos actualizar le demos mas etiquetas
            $course->tags()->attach([1,2,3]);
        Lo que pasara es que nos saldra en la BD como estara relacionado con las datos que ya estaba antes relacionado por lo que tendremos informacion duplicada
        por tanto cuando queremos actualizar y volver a mandar el Id de las Tags con las que queremos relacionarlas
        Por defecto el curso ya esta relacionado con estas dos Tags
            $course->tags()->attach([1,2]);
        Queremos actualizarlo para agregarle el Tag 3 pero nos analize que si ya tiene el Tag relacionado no nos lo vuelva a agregar y solo en los nuevos inserte el registro
            $course->tags()->sync([1,2,3]);
        Ahora para el caso que queremos quitarle un elemento
            $course->tags()->sync([1,2]); (Esto nos eliminara la relacion que tenia con el Tag 3)

Anteriormente estabamos metiendo datos ficticios en el DataBaseSeeder pero el codigo interno del archivo ah crecido mucho por tanto podemos refactorizar el codigo
donde podemos crear tantos seeders como queramos
Por ejemplo vamos a crear un seeder que su funcion sea insertar registros de usuarios
    * php artisan make:seeder UserSeeder

Formularios

    - Nos creamos un componente donde tenemos las opciones del menu a donde nos redirigira como Post y Home
    - El componente lo estamos usando en "welcome.blade.php"
    - Creamos un controlador para Post listo para implementar un CRUD
        * php artisan make:controller PostController -r
    - Creamos la Ruta en "web.php"

Refactorizar las reglas de validacion
Como estas reglas las usamos igual en varios metodos, vamos crear un archivo que podamos reutilizar
para esto nos tenemos que crear un Form Request con el comando:
         php artisan make:request PostRequest
