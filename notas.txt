Listar Rutas
    Para ver todas las ritas que tenemos definidas en el sistema:
        * php artisan route:list o php artisan r:l

    Nos va a mostrar tanto rutas definidas por nosotros como rutas definidas por paquetes
    Para ver solo las rutas definidas por nosotros
        * php artisan r:l --except-vendor

    Para solo ver las rutas creadas por paquetes
        * php artisan r:l --only-vendor

    Supongamos que solo queremos visualizar rutas que empiezen con la palabra "cursos"
        * php artisan r:l --path=cursos

Almacenar en cache las rutas
    Como todo el tiempo Laravel lee el archivo "web.php" de arriba a abajo, cuando pasemos a produccion
    ya no vamos a estar creando rutas y lo mejor seria que laraval ya se aprenda las rutas que estan
    Para almacenar las rutas en Cache: (Esto se haria en la terminal del servidor)
        * php artisan route:cache

    Si despues el proyecto sufrio actualizaciones y tenemos nuevas rutas
    Primero limpiamos las rutas del cache
        * php artisan route:clear
    Luego con el archivo actualizado volvemos a agregar a Cache

Crear Controladores
    * php artisan make:controller PostController

Vistas
    Uso de la plantilla Blade para no crearlas con PHP crudo
    El nombre que se les da puede ser cualquiera pero se sigue la convencion de nombrarla como el metodo del controlador donde se llaman

Crear un Provider
    * php artisan make:provider NombreProvider

Imprimir contenido o implementar logica dentro de las plantillas Blade
Para imprimir variables tenemos que hacerlo con
            {{ Variable }}
Pero si estamos trabajando con algun framework que utiliza la misma sintaxis para mostrar contenido
tenemos que hacer
            @{{ Dato/Codigo }}

Instalamos Tailwind y usamos un codigo de alert que sacamos de la documentacion
Para usar un componente
    * php artisan make:component Nombre
Estos estan en la carpeta App/View/components

Componentes como plantilla
    Cuando tenemos codigo que se repite mucho en las paginas, como los estilos, CDN u otros archivos, usamos estas plantillas
    En este caso vamos a usarlas creando componentes
        - php artisan make:component AppLayout

Migraciones:
    Conexion a la Base de datos:
        Abrimos el manejador del MySql (En la variable de entorno vemos el nombre de la BD y el user/passwrod)
        En laragon al crear el proyecto de laravel ya no creo la BD pero si no esta la creamos manualmente
    Si la BD esta recien creada o queremos veirificar que si tenemos conexion ejecutamoe el comando:
        * php artisan migrate
    Las tablas se crearon por los archivos de migraciones que tengamos, Laravel registra en una tabla de la BD las migraciones ejecutadas
    con un Lote de identificacion para agrupar cuales se ejecutar en conjunto y cuales en otra ocacion

    Crear nuestras migraciones
        - php artisan make:migration NombreTablaPlural
    Para Ahorrarnos tener que escribirle todo el codigo podemos nombrarlos siguiendo una convencion
        - php artisan make:migration create_NombrePlural_table
    Ejecutar la migracion:
        - php artisan migrate

    Al ejecutar las migraciones veremos que se ejcutan por lotes
    Para ejecutar los cambios No podemos ejecutar el metodo UP de los archivos de migracion sino que tenemos que ejecutar el metodo DOWN
        - php artisan migrate:rollback
    Hay que tener en cuenta que por defecto este comando ejecuta el metodo Down de todas las migraciones que se hayan ejecutado en el ultimo lote
    por consecuencia nos elimina los cambios de la migracion.
    Ahora podemos volver a ejecutar el comando para ejecutar el metodo UP y asi se nos aplicara las modificaciones que hicimos

    Pero si empezamos a hacer cambios de migraciones de diferentes lotes podriamos ejecutar el comando del Rollback para cada uno de los lotes hasta
    llegar al que queremos
    Lo mejor es que para revertir los cambios de diferentes lotes
        - php artisan migrate:refresh
    Este comando nos ejecuta todos los metodos DOWN de cada una de las migraciones sin importar el Lote en el que se encuentren y despues nos ejecuta el metodo UP
    para cada uno de los archivos (Despues de esto tambien tendremos registradas todas las migraciones en el mismo lote porque las borramos y volvimos a ejecutar todas)

    Tambien tenemos el comando
        - php artisan migrate:fresh
    Este comando nos elimina todas las tablas y despues ejecuta el metodo UP

    Cual de estos dos comando elegir
        Si ya estamos trabajando en proyecto de laravel pasado donde luego hemos creado tablas usando las migraciones y en un determinado momento queremos revertir todos los cambios
        que hemos hecho con las migraciones y volver a ejecutar, en ese caso es mejor usar el comando "Refresh" porque este comando solo va a revertir los cambios que hemos hecho con
        las migraciones, volver a ejecutar pero lo mas importante es que no va a tocar las tablas que ya estaban en el proyecto pasado

        Mientras que Fresh es mas destructivo, eliminando todas las tablas independientemente si las creamos con migraciones o no
        Si hemos trabajado en un proyecto desde cero, da igual si usamos uno u otro
